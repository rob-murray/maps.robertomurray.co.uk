    <div id="map">
      <div id="about-overlay">
        <a href='#' id='hide'>&#x2715;</a>
        <h4>BBC Price of Football 2012</h4>
        <p>This map visualises the data collected by the BBC <a title="BBC Price of Football survey 2012" href="http://www.bbc.co.uk/news/uk-19842397" target="_blank">Price of Football survey 2012</a>.</p>
        <p>@note<br>The size of the club circle overlay depicts value of selected data relative to whole dataset.</p>
        <p>@datasource<br>Datasource available <a title="BBC Price of Football survey 2012 data Google Docs" href="https://docs.google.com/spreadsheet/ccc?key=0Aox8knJZwgFBdHdKV3NvcVhtSnlob2hkeWtMWnVMN0E" target="_blank">here</a></p>
        <p>@version<br>Datasource updated: <time class="dsource-date" datetime="<%= h(@datasource_date) %>"><%= h(@datasource_date_pretty) %></time></p>
        <p>@see<br>About the <a href="http://robertomurray.co.uk/blog/2012/mapping-bbc-price-of-football-survey/" title="Read more">Price of Football survey</a> map and how I collected the data.</p>
        <p class="attribution">mapping provided by <a href="http://o-s.co.uk" title="Thanks Ordnance Survey">Ordnance Survey</a></p>
      </div>
      
    </div>
<div id="data-container">
  <div id="legend">
    <h5>League</h5>
    <ul id="league-list">
<!-- populated on runtime -->      
    </ul>
    
    <p>
    <h5>Select statistic</h5>
      <select id="stat-select">
<!-- populated on runtime -->        
      </select>
    </p>
  </div>
  <div id="football-club-stats">
<!-- populated on map click -->
  </div>
</div>

<link href="<%= get_asset_path "assets/css/openlayers.css" %>" rel="stylesheet">
<style type="text/css">

/* map specific styles */
#map {
    width:75%;
}

#data-container{
  width: 25%;
  position:absolute; 
  top:0; 
  bottom:0;
  right:0;
  padding-top: 50px;
  border-left: 1px grey solid;
  overflow-y: scroll;
}

#data-container div{
  padding: 5px;
}

#legend{
  border-bottom: 1px grey solid;
}

#legend ul{
  margin: 0;
}

#legend li{
  list-style: none;
  font-size: 1.2em;
  padding: 3px;
}

#legend li input{
  margin-right: 5px;
}

</style>

<script src="//ajax.googleapis.com/ajax/libs/jquery/1.8.2/jquery.min.js"></script>
<script src="//cdnjs.cloudflare.com/ajax/libs/underscore.js/1.4.2/underscore-min.js"></script>
<script type="text/javascript" src="http://openlayers.org/api/OpenLayers.js"></script>
<script type="text/javascript" src="<%= get_asset_path "assets/js/OSOpenspace.js" %>"></script>

<!-- template for club -->
<script type="text/html" id="templ">
  
  <h4>{{ club }}</h2>
  <p>{{ league }}</p>
  <dl>
    <dt>Cheapest season ticket</dt>
      <dd>£ {{ cheapestSeasonTicket }}</dd>
    <dt>Most expensive season ticket</dt>
      <dd>£ {{ expensiveSeasonTicket }}</dd>
    <dt>Cheapest match-day ticket</dt>
      <dd>£ {{ cheapestDayTicket }}</dd>
    <dt>Most Expensive match-day ticket</dt>
      <dd>£ {{ expensiveDayTicket }}</dd>
    <dt>Cheapest day out</dt>
      <dd>£ {{ cheapestDay }}</dd>
    <dt>Programme</dt>
      <dd>£ {{ programme }}</dd>      
    <dt>Pie</dt>
      <dd>£ {{ pie }}</dd> 
    <dt>Tea</dt>
      <dd>£ {{ tea }}</dd>      
  </dl>
  
</script>

<script>
  
(function() {

  "use strict"; //enable strict mode for whole block
    
  var console = (window.console = window.console || {});
    
  /*
   * Define data structure & some config
   */
   
  var leagueColours = ["#FF0000", "#278627", "#D30068", "#FFA701", "#6C8CD5", "#0F52A8", "#FFEC01", "#01AC6F", "#AEF100", "#7E07A9"];
  var leagues = ["Premier League", "Championship", "League One", "League Two", "Blue Square Bet Premier", "Scottish Premier League", "Scottish First Division", "Scottish Second Division", "Scottish Third Division", "Women's Super League"];

  //TODO: combine data into one object
    
  var headers = ["Cheapest season ticket", "Most expensive season ticket", "Cheapest match-day ticket", "Most Expensive match-day ticket", "Cheapest day out", "Programme", "Pie", "Tea"];
  var statTypes = {
    CHEAPEST_SEASON_TICKET: 0,
    MOST_EXPENSIVE_SEASON_TICKET: 1,
    CHEAPEST_MATCH_DAY_TICKET: 2,
    MOST_EXPENSIVE_MATCH_DAY_TICKET: 3,
    CHEAPEST_DAY_OUT: 4,
    PROGRAMME: 5,
    PIE: 6,
    TEA: 7
  };
  
  /*
   * Handle UI
   */
  function onFeatureSelect(feature) {
    updateTeamStat(feature);
  }
  
  function onFeatureUnselect(feature) {
    //could remove the team from display?
  }
  
  function getStatDisplayed(){
    var type;
    //TODO store option
    var selectVal = $("#stat-select").val();
    
    //var keys = Object.keys(statTypes);//this is ecma5! 
    // unfortuntately im targeting >= IE8 so will have to do this
    var keys = _.keys(statTypes);

    type = statTypes[keys[selectVal]];
    return type;
  }
  
  function getMultiplierForStatAndLeague(stat, league){ //have the option to do something specific for league if nec
    var multiplier;
    switch(stat)
    {
    case statTypes.CHEAPEST_SEASON_TICKET:
      multiplier = 0.1;
      break;
    case statTypes.MOST_EXPENSIVE_SEASON_TICKET:
      multiplier = 0.05;
      break;
    case statTypes.CHEAPEST_MATCH_DAY_TICKET:
      multiplier = 1.0;
      break;
    case statTypes.MOST_EXPENSIVE_MATCH_DAY_TICKET:
      multiplier = 0.5;
      break;  
    case statTypes.CHEAPEST_DAY_OUT:
      multiplier = 1.0;
      break; 
    case statTypes.PROGRAMME:
      multiplier = 10;
      break;
    case statTypes.PIE:
      multiplier = 10;
      break;
    case statTypes.TEA:
      multiplier = 10;
      break;    
    }
    return multiplier;
  }
  
  function getFeatureCSVStringForType(type){
    var csvString;
    switch(type)
    {
    case statTypes.CHEAPEST_SEASON_TICKET:
      csvString = "Cheapest season ticket";
      break;
    case statTypes.MOST_EXPENSIVE_SEASON_TICKET:
      csvString = "Most expensive season ticket";
      break;
    case statTypes.CHEAPEST_MATCH_DAY_TICKET:
      csvString = "Cheapest match-day ticket";
      break;
    case statTypes.MOST_EXPENSIVE_MATCH_DAY_TICKET:
      csvString = "Most expensive match-day ticket";
      break;  
    case statTypes.CHEAPEST_DAY_OUT:
      csvString = "Cheapest day out";
      break; 
    case statTypes.PROGRAMME:
      csvString = "Programme";
      break;
    case statTypes.PIE:
      csvString = "Pie";
      break;
    case statTypes.TEA:
      csvString = "Tea";
      break;    
    }
    return csvString;
  }
  
  function getLeaguesToDisplay(){
    var selected = [];
    //TODO this is slow. store option
    $("input:checkbox[name=leagues]:checked").each(function(){
      var i = parseFloat($(this).val());
      selected.push(i);
    });
    //console.log(selected);
    return selected;
  }

  function updateTeamStat(feature){
    var data = {
      club: feature.attributes["Club"],
      league: leagues[feature.attributes["League"]-1],
      cheapestSeasonTicket: feature.attributes["Cheapest season ticket"],
      expensiveSeasonTicket: feature.attributes["Most expensive season ticket"],
      cheapestDayTicket: feature.attributes["Cheapest match-day ticket"],
      expensiveDayTicket: feature.attributes["Most expensive match-day ticket"],
      cheapestDay: feature.attributes["Cheapest day out"],
      programme: feature.attributes["Programme"],
      pie: feature.attributes["Pie"],
      tea: feature.attributes["Tea"]
    };
    
    var h = t(data);
    $("#football-club-stats").html(h);
  }
  
  _.templateSettings = {
    interpolate: /\{\{(.+?)\}\}/g
  }
  var t = _.template($("#templ").text());
    
  function init(){
    
    //need a reference to this a lot
    var geoJSONlayer;
    
    /*
     * Set up some UI
     */
    var selectElem = $('#stat-select');
    var leagueListElem = $('#league-list');
    
    //create select options from csv headers
    $.each(headers, function(val, text) {
      selectElem.append( $('<option></option>').val(val).html(text) );
    });
    
    //event handler for select change
    selectElem.change(function() {
      geoJSONlayer.redraw();
    });
    
    //add leagues + colours
    $.each(leagues, function(val, text) {
      leagueListElem.append( '<li style="background-color:'+leagueColours[val]+'"><input name="leagues" type="checkbox" checked="checked" value="'+val+'">'+text+'</li>' );
    });   
    leagueListElem.change(function() {
      geoJSONlayer.redraw();
    });
    
    //add on click event to about button
    if(document.getElementById("hide")){
      document.getElementById("hide").onclick = function(){
        var about = document.getElementById("about-overlay");
        if(about.className === 'imhiding'){
            about.className = '';
            this.innerHTML = '&#x2715;';
        }else{
            about.className = 'imhiding';
            this.innerHTML = '&#043;';
        }
      };
    }
    
    /*
     * Set up the map
     */
    var map, openspaceLayer, text, params;
    var key = "9C2E537D02A6F312E0405F0ACA607A42";
    var url = "http://maps.robertomurray.co.uk";

    var e = 382948;
    var n = 313156;
    var zoom = 2;

    map = new OpenLayers.Map({
      div:'map',
      theme: null,
      restrictedExtent: new OpenLayers.Bounds(0, 0, 700000, 1300000),
      eventListeners: {
        moveend: function(){
          var ctr = map.getCenter();
          window.location.hash = "x="+Math.round(ctr.lon)+"&y="+Math.round(ctr.lat)+"&z="+map.getZoom();
        }
      },
      controls: [
        new OpenLayers.Control.Zoom(),
        new OpenLayers.Control.Navigation(),
        new OpenLayers.Control.Attribution(),
        new OpenLayers.Control.TouchNavigation({
          dragPanOptions: {
            enableKinetic: true
          }
        })
      ]
    });

    openspaceLayer = new OpenLayers.Layer.OSOpenSpace("OS Openspace",key, url, {});
    map.addLayer(openspaceLayer);    
      
    //get the params and zoom to
    params = OpenLayers.Util.getParameters("?"+window.location.hash.substr(1));
    if(params.hasOwnProperty('x') && 
      params.hasOwnProperty('y') && 
      params.hasOwnProperty('z')){
       
      map.setCenter(new OpenLayers.LonLat(params.x, params.y), params.z);
    }else{
      map.setCenter(new OpenLayers.LonLat(e, n), zoom);
    }
    
    
    /*
     * Configure dynamic styling for the OL features
     */
    var renderer = OpenLayers.Util.getParameters(window.location.href).renderer;
    renderer = (renderer) ? [renderer] : OpenLayers.Layer.Vector.prototype.renderers;
    
    var context = {
      getColor: function(feature) {
        var color = leagueColours[feature.attributes["League"]-1];
        return color;
      },
      getSize: function(feature) {
        var size;
                  
        var leaguesDisplayed = getLeaguesToDisplay();
        var league = feature.attributes["League"];
                  
        //im not too impressed with this. TODO refactor
        if(_.indexOf(leaguesDisplayed, league-1) >= 0){
                    
          var statType = getStatDisplayed();
          var multiplier = getMultiplierForStatAndLeague(statType, league);

          size = multiplier * feature.attributes[getFeatureCSVStringForType(statType)];
                    
        }else{
          size = 0;
        }

        return size;
      }
    };
    
    var template = {
      pointRadius: "${getSize}",
      fillColor: "${getColor}",
      fillOpacity: 0.5,
      strokeColor: "${getColor}",
      cursor: 'pointer'
    };
    
    var style = new OpenLayers.Style(template, {context: context});
    
    /*
     * Finally add the geojson layer to map, UI controls what is shown
     */
    var geoJSONlayer = new OpenLayers.Layer.Vector("GeoJSON", {
      strategies: [new OpenLayers.Strategy.Fixed()],
      protocol: new OpenLayers.Protocol.HTTP({
        url: "<%= get_asset_path 'data/pof-2012.json' %>",
        format: new OpenLayers.Format.GeoJSON()
      }),
      styleMap: new OpenLayers.StyleMap(style),
      renderers: renderer
    });
    map.addLayer(geoJSONlayer);
    
    var selectControl = new OpenLayers.Control.SelectFeature(geoJSONlayer,
      { onSelect: onFeatureSelect, 
        onUnselect: onFeatureUnselect }
    );
    map.addControl(selectControl);
    
    selectControl.activate();
  
  }
  
  window.onload = init;

} ()); 

</script>

